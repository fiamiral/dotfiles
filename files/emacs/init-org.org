#+STARTUP: overview
* initialize use-package
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'package)
    (add-to-list 'package-archives
                 '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize)
    (package-install 'use-package)
    (require 'use-package))
  (require 'bind-key)
#+end_src
* Basic
** Tab
*** using spaces
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
*** set width to 4
#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src
** Parentheses
*** auto insertion of closing parenthesis
#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src
*** highlight the pairiing parentheses
#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src
** Mouse
*** enable mouse
#+begin_src emacs-lisp
  (xterm-mouse-mode t)
#+end_src
*** scroll with mouse
#+begin_src emacs-lisp
  (mouse-wheel-mode t)
#+end_src

** backups
*** number of backup stored
#+begin_src emacs-lisp
  (setq kept-new-versions 5)
#+end_src
*** autodelete of backup file
#+begin_src emacs-lisp
  (setq delete-old-versions t)
#+end_src
*** location of backup file
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.config/emacs/backups")))
#+end_src
*** do not create auto save list file
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix nil)
#+end_src
** set custom-file to custom.el
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
** hide startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
* keybind
** command submenu by hydra
[[https://github.com/abo-abo/hydra][hydra]]
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
#+end_src
** quit by 'C-q'
#+begin_src emacs-lisp
  (bind-key "C-q" 'save-buffers-kill-terminal)
#+end_src
** reload by 'C-r'
#+begin_src emacs-lisp
  (defun reload-emacs ()
    (interactive)
    (load-file "~/.config/emacs/init.el"))
  (bind-key "C-r" 'reload-emacs)
#+end_src
** save by 'C-s'
#+begin_src emacs-lisp
  (bind-key "C-s" 'save-buffer)
#+end_src
** search by 'C-f'
#+begin_src emacs-lisp
  (bind-key "C-f" 'isearch-forward-regexp)
#+end_src
** jump cursor by 'C-SPC'
[[https://github.com/abo-abo/avy][avy]]
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind ("C-@" . avy-goto-char-timer) ; C-@ == C-SPC
    :init
    (setq avy-keys (number-sequence ?a ?z)))
#+end_src
* Appearance
** nord theme
#+begin_src emacs-lisp
  (use-package nord-theme
    :ensure t
    :init
    (load-theme 'nord t))
#+end_src
** transparent
#+begin_src emacs-lisp
  (defun on-after-init ()
    (unless (display-graphic-p (selected-frame))
      (set-face-background 'default "unspecified-bg" (selected-frame))))

  (add-hook 'window-setup-hook 'on-after-init)
#+end_src
** line number
*** use display-line-numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src
** hide menu bar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src
* org-mode
** indent heading
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
** use shift-select
#+begin_src emacs-lisp
  (setq org-support-shift-select 'always)
#+end_src
* IDE
** inline completion by corfu
[[https://github.com/minad/corfu][corfu]]
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t) ; Enable auto completion
    :init
    (global-corfu-mode))
#+end_src
[[https://codeberg.org/akib/emacs-corfu-terminal][emacs-corfu-terminal]] : dependency for use corfu in CUI
#+begin_src emacs-lisp
  (use-package corfu-terminal
    :ensure t
    :init
    (corfu-terminal-mode))
#+end_src
** minibuffer completion by fido-vertical-mode
#+begin_src emacs-lisp
  (fido-vertical-mode +1)
#+end_src
** extend completion by cape
[[https://github.com/minad/cape][cape]]
#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src

** fuzzy matching completion by fussy
[[https://github.com/jojojames/fussy][fussy]]
#+begin_src emacs-lisp
  (use-package fussy
    :ensure t
    :config
    (add-to-list 'completion-styles 'fussy t))
#+end_src
*** TODO use another backends for improve performance
** linter by flycheck
[[https://www.flycheck.org][flycheck]]
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+end_src
*** TODO define submenu by hydra
