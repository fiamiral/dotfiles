#+STARTUP: overview
* initialize package.el
** require
#+begin_src emacs-lisp
  (require 'package)
#+end_src
** add repository
#+begin_src emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
#+end_src
** initialize
#+begin_src emacs-lisp
  (package-initialize)
#+end_src
* Basic
** Tab
*** using spaces
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
*** set width to 4
#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src
** Parentheses
*** auto insertion of closing parenthesis
#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src
*** highlight the pairiing parentheses
#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src
** Mouse
*** enable mouse
#+begin_src emacs-lisp
  (xterm-mouse-mode t)
#+end_src
*** scroll with mouse
#+begin_src emacs-lisp
  (mouse-wheel-mode t)
#+end_src

** backups
*** number of backup stored
#+begin_src emacs-lisp
  (setq kept-new-versions 5)
#+end_src
*** autodelete of backup file
#+begin_src emacs-lisp
  (setq delete-old-versions t)
#+end_src
*** location of backup file
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.config/emacs/backups")))
#+end_src
*** do not create auto save list file
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix nil)
#+end_src
** set custom-file to custom.el
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
** hide startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
* keybind
** command submenu by hydra
[[https://github.com/abo-abo/hydra][hydra]]
#+begin_src emacs-lisp
  (package-install 'hydra)
#+end_src
** quit by 'C-q'
#+begin_src emacs-lisp
  (global-set-key "\C-q" 'save-buffers-kill-terminal)
#+end_src
** reload by 'C-r'
#+begin_src emacs-lisp
  (defun reload-emacs ()
    (interactive)
    (load-file "~/.config/emacs/init.el"))
  (global-set-key "\C-r" 'reload-emacs)
#+end_src
** save by 'C-s'
#+begin_src emacs-lisp
  (global-set-key "\C-s" 'save-buffer)
#+end_src
** search by 'C-f'
#+begin_src emacs-lisp
  (global-set-key "\C-f" 'isearch-forward-regexp)
#+end_src
** jump cursor by 'C-SPC'
[[https://github.com/abo-abo/avy][avy]]
#+begin_src emacs-lisp
  (package-install 'avy)
  (setq-default avy-keys (number-sequence ?a ?z))
  (global-set-key (kbd "C-@") 'avy-goto-char-timer)
#+end_src
* Appearance
** nord theme
#+begin_src emacs-lisp
  (package-install 'nord-theme)
  (load-theme 'nord t)
#+end_src
** transparent
#+begin_src emacs-lisp
  (defun on-after-init ()
    (unless (display-graphic-p (selected-frame))
      (set-face-background 'default "unspecified-bg" (selected-frame))))

  (add-hook 'window-setup-hook 'on-after-init)
#+end_src
** line number
*** use display-line-numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src
* org-mode
** indent heading
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
* IDE
** inline completionm by corfu
[[https://github.com/minad/corfu][corfu]]
[[https://codeberg.org/akib/emacs-corfu-terminal][emacs-corfu-terminal]]: dependency for use corfu in CUI
corfu-auto: auto completion
#+begin_src emacs-lisp
  (package-install 'corfu)
  (package-install 'corfu-terminal)

  (global-corfu-mode)
  (corfu-terminal-mode)
  (setq-default corfu-auto t)
#+end_src
** minibuffer completion by fido-vertical-mode
#+begin_src emacs-lisp
  (fido-vertical-mode +1)
#+end_src
** extend completion by cape
[[https://github.com/minad/cape][cape]]
#+begin_src emacs-lisp
  (package-install 'cape)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
#+end_src

** fuzzy matching completion by fussy
[[https://github.com/jojojames/fussy][fussy]]
#+begin_src emacs-lisp
  (package-install 'fussy)
  (add-to-list 'completion-styles 'fussy t)
#+end_src
*** TODO use another backends for improve performance
** linter by flycheck
[[https://www.flycheck.org][flycheck]]
#+begin_src emacs-lisp
  (package-install 'flycheck)
  (require 'flycheck)
  (global-flycheck-mode)
#+end_src
*** flycheck submenu by hydra
#+begin_src emacs-lisp
  (defhydra hydra-flycheck-menu (:color blue
                                 :hint nil)
    "
  ^Show^             ^Move^
  ^^^^^^^---------------------------
  _l_: list errors   _n_ next error
  ^ ^                _N_ previous error
  "
    ("l" flycheck-list-errors)
    ("n" flycheck-next-error)
    ("N" flycheck-previous-error))
  (global-set-key (kbd "C-l") nil)
  (define-key flycheck-mode-map (kbd "C-l") 'hydra-flycheck-menu/body)
#+end_src
